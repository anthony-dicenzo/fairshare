// fix-supabase-migration.js
import { readFileSync, writeFileSync } from 'fs';
import { Pool } from 'pg';
import dotenv from 'dotenv';

console.log('Starting Supabase migration fix...');

// Load environment variables from .env.local
try {
  const envPath = './.env.local';
  const envContent = readFileSync(envPath, 'utf8');
  
  // Parse environment variables
  const env = {};
  envContent.split('\n').forEach(line => {
    const match = line.match(/^\s*([\w.-]+)\s*=\s*(.*)?\s*$/);
    if (match) {
      const key = match[1];
      let value = match[2] || '';
      if (value.length > 0 && value.charAt(0) === '"' && value.charAt(value.length - 1) === '"') {
        value = value.replace(/^"|"$/g, '');
      }
      env[key] = value;
      process.env[key] = value;
    }
  });
  
  console.log('Successfully loaded environment variables from .env.local');
  
  // Check for required variables
  if (!env.DATABASE_URL) {
    throw new Error('DATABASE_URL is missing in .env.local');
  }
  
  // Log database connection details (without sensitive info)
  console.log('Database URL format: ', env.DATABASE_URL.replace(/:[^:@]*@/, ':****@'));
  
  // Test database connection
  console.log('Testing Supabase database connection...');
  const pool = new Pool({
    connectionString: env.DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  });
  
  // Create the necessary tables for the application
  const createTables = async () => {
    try {
      const client = await pool.connect();
      console.log('Connected to Supabase database successfully!');
      
      console.log('Creating session table for connect-pg-simple...');
      await client.query(`
        CREATE TABLE IF NOT EXISTS "session" (
          "sid" varchar NOT NULL,
          "sess" json NOT NULL,
          "expire" timestamp(6) NOT NULL,
          CONSTRAINT "session_pkey" PRIMARY KEY ("sid")
        );
        CREATE INDEX IF NOT EXISTS "IDX_session_expire" ON "session" ("expire");
      `);
      
      console.log('Creating user_balances_in_group table...');
      await client.query(`
        CREATE TABLE IF NOT EXISTS user_balances_in_group (
          id SERIAL PRIMARY KEY,
          user_id INTEGER NOT NULL,
          group_id INTEGER NOT NULL,
          balance_amount NUMERIC NOT NULL DEFAULT 0,
          last_updated TIMESTAMP DEFAULT NOW() NOT NULL,
          UNIQUE (user_id, group_id)
        );
      `);
      
      console.log('Creating user_balances_between_users table...');
      await client.query(`
        CREATE TABLE IF NOT EXISTS user_balances_between_users (
          id SERIAL PRIMARY KEY,
          group_id INTEGER NOT NULL,
          from_user_id INTEGER NOT NULL,
          to_user_id INTEGER NOT NULL,
          balance_amount NUMERIC NOT NULL DEFAULT 0,
          last_updated TIMESTAMP DEFAULT NOW() NOT NULL,
          UNIQUE (group_id, from_user_id, to_user_id)
        );
      `);
      
      console.log('Database tables created successfully!');
      client.release();
    } catch (error) {
      console.error('Error creating database tables:', error.message);
      throw error;
    }
  };
  
  // Create a file to export database environment variables
  console.log('Creating database environment export file...');
  const exportFile = './export-database-env.js';
  
  const exportContent = `// Generated by migration script
// This file exports the database connection variables from .env.local
// Import this file to ensure consistent database connections

export const DATABASE_URL = "${env.DATABASE_URL}";
export const SUPABASE_URL = "${env.SUPABASE_URL}";
export const SUPABASE_ANON_KEY = "${env.SUPABASE_ANON_KEY}";
`;
  
  writeFileSync(exportFile, exportContent);
  console.log('Database environment export file created successfully!');
  
  // Run the database setup
  createTables().then(() => {
    console.log('Supabase migration completed successfully!');
    console.log('Your application is now configured to use Supabase.');
    console.log('To restart your application, use the workflow restart button.');
  }).catch(error => {
    console.error('Error during Supabase migration:', error);
    process.exit(1);
  });
  
} catch (error) {
  console.error('Error during Supabase migration fix:', error.message);
  process.exit(1);
}